/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),a=n(645),o=n.n(a)()(i());o.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600;700;800;900&family=Open+Sans:wght@300;400;500;600;700;800&display=swap);"]),o.push([t.id,':root {\n  font-family: inherit;\n  font-size: 16px;\n  --bg-color: #f6f8fa;\n  --border-color: #d0d7de;\n  --dark-color: #1f2329;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0;\n  background-color: var(--bg-color);\n}\n\nh1 {\n  text-align: center;\n  font-size: 2rem;\n  font-weight: 300;\n  font-family: Cinzel;\n}\n\nnav {\n  border-bottom: 1px solid var(--border-color);\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.navi {\n  width: 100%;\n  max-width: 980px;\n  text-align: center;\n}\n\n.main {\n  width: 100%;\n  min-height: 80vh;\n  display: flex;\n  justify-content: center;\n  flex-grow: 1;\n  flex-basis: auto;\n}\n\nfooter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  border-top: 1px solid var(--border-color);\n  gap: 10px;\n  height: 3rem;\n  max-height: 4rem;\n}\n\n.gitHub {\n  width: 4rem;\n  height: auto;\n}\n/* ---------------------------------------------------------- */\n.navBar {\n  display: flex;\n  width: 980px;\n  justify-content: space-around;\n}\n\n#navButtonContainer {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.sidebar {\n  flex-grow: 1;\n}\n\n#content {\n  width: 100%;\n  max-width: 980px;\n  flex-grow: 1;\n  flex-grow: 2;\n  padding: 1rem;\n}\n\n.list > div:first-child {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n\n.cards {\n  border: 1px solid black;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.171);\n}\n\n.groupTodoTitle {\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  cursor: default;\n}\n\n.groupTodoRestEl {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  gap: 1rem;\n  margin-top: -2rem;\n  font-size: 1.5rem;\n  padding: 1rem;\n}\n\n.editTodo {\n  font-weight: 700;\n  font-size: 1.5rem;\n  color: grey;\n  user-select: none;\n}\n.editTodo:hover {\n  transform: scale(1.1);\n  pointer-events: none;\n}\n\n.sideLeft {\n  text-align: end;\n  padding: 1rem;\n}\n\n.formListContainer {\n  display: none;\n  position: absolute;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: white;\n  border-radius: 10px;\n  top: 20%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 2px solid black;\n}\n\n.formTodoContainer {\n  position: absolute;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border-radius: 10px;\n  gap: 2rem;\n  top: 50%;\n  left: 50%;\n  border: 2px solid black;\n  transform: translate(-50%, -50%);\n}\n\n.containerForm2 {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  padding: 1rem;\n  width: 400px;\n}\n\n#formTodo {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 5px 12px;\n  font-size: 1.5rem;\n  line-height: 20px;\n  color: #24292e;\n  vertical-align: middle;\n  background-repeat: no-repeat;\n  background-position: right 8px center;\n  border-radius: 6px;\n  outline: none;\n  box-shadow: rgba(225, 228, 232, 0.2) 0px 1px 0px 0px inset;\n}\nform:focus {\n  border-color: #0366d6;\n  outline: none;\n  box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 3px;\n}\n\n.styleBtn1 {\n  margin: 10px;\n  outline: none;\n  background-color: initial;\n  background-image: linear-gradient(-180deg, #009879, #009879);\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 2px 4px;\n  color: #ffffff;\n  font-family: Inter, -apple-system, system-ui, Roboto, "Helvetica Neue", Arial, sans-serif;\n  height: 40px;\n  line-height: 40px;\n  outline: 0;\n  padding: 0 20px;\n  vertical-align: top;\n  white-space: nowrap;\n  z-index: 9;\n  border: 0;\n  transition: box-shadow 0.2s;\n}\n\n.styleBtn2 {\n  margin: 10px;\n  outline: none;\n  background-color: initial;\n  background-image: linear-gradient(-180deg, #ff7e31, #e62c03);\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 2px 4px;\n  color: #ffffff;\n  font-family: Inter, -apple-system, system-ui, Roboto, "Helvetica Neue", Arial, sans-serif;\n  height: 40px;\n  line-height: 40px;\n  outline: 0;\n  padding: 0 20px;\n  vertical-align: top;\n  white-space: nowrap;\n  z-index: 9;\n  border: 0;\n  transition: box-shadow 0.2s;\n}\n\n.styleBtn1:hover {\n  background: #00bd68;\n}\n.styleBtn1:active {\n  transform: scale(1.1);\n  transition: ease-in-out;\n}\n\n.styleBtn2:hover {\n  background: #e62c03;\n}\n\n.styleBtn2:active {\n  transform: scale(1.1);\n  transition: ease-in-out;\n}\n\n.content {\n  position: relative;\n}\n\ninput[type="checkbox"] {\n  width: 30px;\n  height: 30px;\n  accent-color: #009879;\n}\n\ntextarea {\n  width: 250px;\n  height: 10em;\n  resize: none;\n}\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600;700;800;900&family=Open+Sans:wght@300;400;500;600;700;800&display=swap");\n\n:root {\n  font-family: inherit;\n  font-size: 16px;\n  --bg-color: #f6f8fa;\n  --border-color: #d0d7de;\n  --dark-color: #1f2329;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0;\n  background-color: var(--bg-color);\n}\n\nh1 {\n  text-align: center;\n  font-size: 2rem;\n  font-weight: 300;\n  font-family: Cinzel;\n}\n\nnav {\n  border-bottom: 1px solid var(--border-color);\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.navi {\n  width: 100%;\n  max-width: 980px;\n  text-align: center;\n}\n\n.main {\n  width: 100%;\n  min-height: 80vh;\n  display: flex;\n  justify-content: center;\n  flex-grow: 1;\n  flex-basis: auto;\n}\n\nfooter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  border-top: 1px solid var(--border-color);\n  gap: 10px;\n  height: 3rem;\n  max-height: 4rem;\n}\n\n.gitHub {\n  width: 4rem;\n  height: auto;\n}\n/* ---------------------------------------------------------- */\n.navBar {\n  display: flex;\n  width: 980px;\n  justify-content: space-around;\n}\n\n#navButtonContainer {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.sidebar {\n  flex-grow: 1;\n}\n\n#content {\n  width: 100%;\n  max-width: 980px;\n  flex-grow: 1;\n  flex-grow: 2;\n  padding: 1rem;\n}\n\n.list > div:first-child {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n}\n\n.cards {\n  border: 1px solid black;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.171);\n}\n\n.groupTodoTitle {\n  font-size: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  cursor: default;\n}\n\n.groupTodoRestEl {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  gap: 1rem;\n  margin-top: -2rem;\n  font-size: 1.5rem;\n  padding: 1rem;\n}\n\n.editTodo {\n  font-weight: 700;\n  font-size: 1.5rem;\n  color: grey;\n  user-select: none;\n}\n.editTodo:hover {\n  transform: scale(1.1);\n  pointer-events: none;\n}\n\n.sideLeft {\n  text-align: end;\n  padding: 1rem;\n}\n\n.formListContainer {\n  display: none;\n  position: absolute;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  background-color: white;\n  border-radius: 10px;\n  top: 20%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 2px solid black;\n}\n\n.formTodoContainer {\n  position: absolute;\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  border-radius: 10px;\n  gap: 2rem;\n  top: 50%;\n  left: 50%;\n  border: 2px solid black;\n  transform: translate(-50%, -50%);\n}\n\n.containerForm2 {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  padding: 1rem;\n  width: 400px;\n}\n\n#formTodo {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 5px 12px;\n  font-size: 1.5rem;\n  line-height: 20px;\n  color: #24292e;\n  vertical-align: middle;\n  background-repeat: no-repeat;\n  background-position: right 8px center;\n  border-radius: 6px;\n  outline: none;\n  box-shadow: rgba(225, 228, 232, 0.2) 0px 1px 0px 0px inset;\n}\nform:focus {\n  border-color: #0366d6;\n  outline: none;\n  box-shadow: rgba(3, 102, 214, 0.3) 0px 0px 0px 3px;\n}\n\n.styleBtn1 {\n  margin: 10px;\n  outline: none;\n  background-color: initial;\n  background-image: linear-gradient(-180deg, #009879, #009879);\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 2px 4px;\n  color: #ffffff;\n  font-family: Inter, -apple-system, system-ui, Roboto, "Helvetica Neue", Arial, sans-serif;\n  height: 40px;\n  line-height: 40px;\n  outline: 0;\n  padding: 0 20px;\n  vertical-align: top;\n  white-space: nowrap;\n  z-index: 9;\n  border: 0;\n  transition: box-shadow 0.2s;\n}\n\n.styleBtn2 {\n  margin: 10px;\n  outline: none;\n  background-color: initial;\n  background-image: linear-gradient(-180deg, #ff7e31, #e62c03);\n  border-radius: 6px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 2px 4px;\n  color: #ffffff;\n  font-family: Inter, -apple-system, system-ui, Roboto, "Helvetica Neue", Arial, sans-serif;\n  height: 40px;\n  line-height: 40px;\n  outline: 0;\n  padding: 0 20px;\n  vertical-align: top;\n  white-space: nowrap;\n  z-index: 9;\n  border: 0;\n  transition: box-shadow 0.2s;\n}\n\n.styleBtn1:hover {\n  background: #00bd68;\n}\n.styleBtn1:active {\n  transform: scale(1.1);\n  transition: ease-in-out;\n}\n\n.styleBtn2:hover {\n  background: #e62c03;\n}\n\n.styleBtn2:active {\n  transform: scale(1.1);\n  transition: ease-in-out;\n}\n\n.content {\n  position: relative;\n}\n\ninput[type="checkbox"] {\n  width: 30px;\n  height: 30px;\n  accent-color: #009879;\n}\n\ntextarea {\n  width: 250px;\n  height: 10em;\n  resize: none;\n}\n'],sourceRoot:""}]);const s=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,a){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var d=0;d<t.length;d++){var u=[].concat(t[d]);r&&o[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},o=[],s=0;s<t.length;s++){var l=t[s],d=r.base?l[0]+r.base:l[0],u=a[d]||0,c="".concat(d," ").concat(u);a[d]=u+1;var A=n(c),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var f=i(m,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:f,references:1})}o.push(c)}return o}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var a=r(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<a.length;o++){var s=n(a[o]);e[s].references--}for(var l=r(t,i),d=0;d<a.length;d++){var u=n(a[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=l}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!t;)t=r[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function r(n){e(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function a(t){e(1,arguments);var n=r(t),i=n.getUTCDay(),a=(i<1?7:0)+i-1;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function o(t){e(1,arguments);var n=r(t),i=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(i+1,0,4),o.setUTCHours(0,0,0,0);var s=a(o),l=new Date(0);l.setUTCFullYear(i,0,4),l.setUTCHours(0,0,0,0);var d=a(l);return n.getTime()>=s.getTime()?i+1:n.getTime()>=d.getTime()?i:i-1}var s={};function l(){return s}function d(t,n){var a,o,s,d,u,c,A,m;e(1,arguments);var f=l(),h=i(null!==(a=null!==(o=null!==(s=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==o?o:null===(A=f.locale)||void 0===A||null===(m=A.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==a?a:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=r(t),p=g.getUTCDay(),E=(p<h?7:0)+p-h;return g.setUTCDate(g.getUTCDate()-E),g.setUTCHours(0,0,0,0),g}function u(t,n){var a,o,s,u,c,A,m,f;e(1,arguments);var h=r(t),g=h.getUTCFullYear(),p=l(),E=i(null!==(a=null!==(o=null!==(s=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(c=n.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==s?s:p.firstWeekContainsDate)&&void 0!==o?o:null===(m=p.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==a?a:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(g+1,0,E),v.setUTCHours(0,0,0,0);var b=d(v,n),C=new Date(0);C.setUTCFullYear(g,0,E),C.setUTCHours(0,0,0,0);var y=d(C,n);return h.getTime()>=b.getTime()?g+1:h.getTime()>=y.getTime()?g:g-1}function c(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const A=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return c("yy"===e?r%100:r,e.length)},m=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):c(n+1,2)},f=function(t,e){return c(t.getUTCDate(),e.length)},h=function(t,e){return c(t.getUTCHours()%12||12,e.length)},g=function(t,e){return c(t.getUTCHours(),e.length)},p=function(t,e){return c(t.getUTCMinutes(),e.length)},E=function(t,e){return c(t.getUTCSeconds(),e.length)},v=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return c(Math.floor(r*Math.pow(10,n-3)),e.length)};var b={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),i=r>0?r:1-r;return n.ordinalNumber(i,{unit:"year"})}return A(t,e)},Y:function(t,e,n,r){var i=u(t,r),a=i>0?i:1-i;return"YY"===e?c(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):c(a,e.length)},R:function(t,e){return c(o(t),e.length)},u:function(t,e){return c(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return c(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return c(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return m(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return c(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,a,o){var s=function(t,n){e(1,arguments);var a=r(t),o=d(a,n).getTime()-function(t,n){var r,a,o,s,c,A,m,f;e(1,arguments);var h=l(),g=i(null!==(r=null!==(a=null!==(o=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(A=c.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==o?o:h.firstWeekContainsDate)&&void 0!==a?a:null===(m=h.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==r?r:1),p=u(t,n),E=new Date(0);return E.setUTCFullYear(p,0,g),E.setUTCHours(0,0,0,0),d(E,n)}(a,n).getTime();return Math.round(o/6048e5)+1}(t,o);return"wo"===n?a.ordinalNumber(s,{unit:"week"}):c(s,n.length)},I:function(t,n,i){var s=function(t){e(1,arguments);var n=r(t),i=a(n).getTime()-function(t){e(1,arguments);var n=o(t),r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),a(r)}(n).getTime();return Math.round(i/6048e5)+1}(t);return"Io"===n?i.ordinalNumber(s,{unit:"week"}):c(s,n.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):f(t,e)},D:function(t,n,i){var a=function(t){e(1,arguments);var n=r(t),i=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var a=i-n.getTime();return Math.floor(a/864e5)+1}(t);return"Do"===n?i.ordinalNumber(a,{unit:"dayOfYear"}):c(a,n.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var i=t.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return c(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var i=t.getUTCDay(),a=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return c(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return c(i,e.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,i=t.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,i=t.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):g(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):c(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):c(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):p(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):E(t,e)},S:function(t,e){return v(t,e)},X:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return y(i);case"XXXX":case"XX":return B(i);default:return B(i,":")}},x:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return y(i);case"xxxx":case"xx":return B(i);default:return B(i,":")}},O:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+C(i,":");default:return"GMT"+B(i,":")}},z:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+C(i,":");default:return"GMT"+B(i,":")}},t:function(t,e,n,r){var i=r._originalDate||t;return c(Math.floor(i.getTime()/1e3),e.length)},T:function(t,e,n,r){return c((r._originalDate||t).getTime(),e.length)}};function C(t,e){var n=t>0?"-":"+",r=Math.abs(t),i=Math.floor(r/60),a=r%60;if(0===a)return n+String(i);var o=e||"";return n+String(i)+o+c(a,2)}function y(t,e){return t%60==0?(t>0?"-":"+")+c(Math.abs(t)/60,2):B(t,e)}function B(t,e){var n=e||"",r=t>0?"-":"+",i=Math.abs(t);return r+c(Math.floor(i/60),2)+n+c(i%60,2)}const w=b;var x=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},T=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const k={p:T,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],i=r[1],a=r[2];if(!a)return x(t,e);switch(i){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",x(i,e)).replace("{{time}}",T(a,e))}};var S=["D","DD"],D=["YY","YYYY"];function M(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var N={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function U(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const Y={date:U({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:U({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:U({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var W={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function L(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):i;r=t.formattingValues[a]||t.formattingValues[i]}else{var o=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[o]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const j={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:L({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:L({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:L({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:L({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:L({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function P(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,i=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(i);if(!a)return null;var o,s=a[0],l=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(l)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(s))return n}(l):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(s))return n}(l);return o=t.valueCallback?t.valueCallback(d):d,{value:o=n.valueCallback?n.valueCallback(o):o,rest:e.slice(s.length)}}}var O,z={ordinalNumber:(O={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(O.matchPattern);if(!n)return null;var r=n[0],i=t.match(O.parsePattern);if(!i)return null;var a=O.valueCallback?O.valueCallback(i[0]):i[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:t.slice(r.length)}}),era:P({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:P({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:P({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:P({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:P({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const I={code:"en-US",formatDistance:function(t,e,n){var r,i=N[t];return r="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:Y,formatRelative:function(t,e,n,r){return W[t]},localize:j,match:z,options:{weekStartsOn:0,firstWeekContainsDate:1}};var q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,F=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,R=/^'([^]*?)'?$/,H=/''/g,X=/[a-zA-Z]/;function Z(n,a,o){var s,d,u,c,A,m,f,h,g,p,E,v,b,C,y,B,x,T;e(2,arguments);var N=String(a),U=l(),Y=null!==(s=null!==(d=null==o?void 0:o.locale)&&void 0!==d?d:U.locale)&&void 0!==s?s:I,W=i(null!==(u=null!==(c=null!==(A=null!==(m=null==o?void 0:o.firstWeekContainsDate)&&void 0!==m?m:null==o||null===(f=o.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==A?A:U.firstWeekContainsDate)&&void 0!==c?c:null===(g=U.locale)||void 0===g||null===(p=g.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==u?u:1);if(!(W>=1&&W<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=i(null!==(E=null!==(v=null!==(b=null!==(C=null==o?void 0:o.weekStartsOn)&&void 0!==C?C:null==o||null===(y=o.locale)||void 0===y||null===(B=y.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==b?b:U.weekStartsOn)&&void 0!==v?v:null===(x=U.locale)||void 0===x||null===(T=x.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==E?E:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!Y.localize)throw new RangeError("locale must contain localize property");if(!Y.formatLong)throw new RangeError("locale must contain formatLong property");var j=r(n);if(!function(n){if(e(1,arguments),!function(n){return e(1,arguments),n instanceof Date||"object"===t(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var i=r(n);return!isNaN(Number(i))}(j))throw new RangeError("Invalid time value");var P=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(j),O=function(t,n){return e(2,arguments),function(t,n){e(2,arguments);var a=r(t).getTime(),o=i(n);return new Date(a+o)}(t,-i(n))}(j,P),z={firstWeekContainsDate:W,weekStartsOn:L,locale:Y,_originalDate:j};return N.match(F).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,k[e])(t,Y.formatLong):t})).join("").match(q).map((function(t){if("''"===t)return"'";var e,r,i=t[0];if("'"===i)return(r=(e=t).match(R))?r[1].replace(H,"'"):e;var s,l=w[i];if(l)return null!=o&&o.useAdditionalWeekYearTokens||(s=t,-1===D.indexOf(s))||M(t,a,String(n)),null!=o&&o.useAdditionalDayOfYearTokens||!function(t){return-1!==S.indexOf(t)}(t)||M(t,a,String(n)),l(O,t,Y.localize,z);if(i.match(X))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return t})).join("")}Math.pow(10,8);var Q=36e5;var G={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},J=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,$=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,_=/^([+-])(\d{2})(?::?(\d{2}))?$/;function V(t){return t?parseInt(t):1}function K(t){return t&&parseFloat(t.replace(",","."))||0}var tt=[31,null,31,30,31,30,31,31,30,31,30,31];function et(t){return t%400==0||t%4==0&&t%100!=0}var nt=n(379),rt=n.n(nt),it=n(795),at=n.n(it),ot=n(569),st=n.n(ot),lt=n(565),dt=n.n(lt),ut=n(216),ct=n.n(ut),At=n(589),mt=n.n(At),ft=n(28),ht={};ht.styleTagTransform=mt(),ht.setAttributes=dt(),ht.insert=st().bind(null,"head"),ht.domAPI=at(),ht.insertStyleElement=ct(),rt()(ft.Z,ht),ft.Z&&ft.Z.locals&&ft.Z.locals,n.p,(()=>{let t=[],n=[],r=[];class a{constructor(t,e,n,r,i,a,o,s){this.title=t,this.task=e,this.duedate=n,this.priority=r,this.notes=i,this.myTodoList=a,this.completed=o,this.deleted=s,this.DOM=document.createElement("div"),this.inputEl=document.createElement("input"),this.titleEl=document.createElement("h3"),this.taskEl=document.createElement("div"),this.duedateEl=document.createElement("div"),this.priorityEl=document.createElement("div"),this.notesEl=document.createElement("div"),this.delBtnEl=document.createElement("button"),this.addBtnEl=document.createElement("button"),this.editBtnEl=document.createElement("div"),this.cancelBtnEl=document.createElement("button"),this.groupTodoITTEl=document.createElement("div"),this.groupTodoRestEl=document.createElement("div")}listener(){this.inputEl.addEventListener("change",(()=>{this.inputEl.checked?this.completed=!0:this.completed=!1,D()}))}editBtn(){this.editBtnEl.addEventListener("click",(()=>{g.setAttribute("value",this.title),p.setAttribute("value",this.task),m.setAttribute("value",this.duedate),v.setAttribute("value",this.priority),b.setAttribute("value",this.notes),y.setAttribute("value",this.myTodoList),addBtn.setAttribute("style","display: none;"),this.addBtnEl.setAttribute("style","display: inline;"),u.setAttribute("style","display: none;"),this.cancelBtnEl.setAttribute("style","display: inline;")}))}addBtn(){this.addBtnEl.addEventListener("click",(()=>{this.title=g.value,this.task=p.value,this.duedate=m.value,this.priority=v.value,this.notes=b.value,this.myTodoList=y.value,g.removeAttribute("value"),p.removeAttribute("value"),m.removeAttribute("value"),v.removeAttribute("value"),b.removeAttribute("value"),y.removeAttribute("value"),f.reset(),this.addBtnEl.setAttribute("style","display: none;"),addBtn.setAttribute("style","display: inline;"),u.setAttribute("style","display: inline;"),this.cancelBtnEl.setAttribute("style","display: none;"),D()}))}delBtn(){this.delBtnEl.addEventListener("click",(()=>{this.deleted=!0,D()}))}cancelBtnTodo(){this.cancelBtnEl.addEventListener("click",(()=>{this.addBtnEl.setAttribute("style","display: none;"),this.cancelBtnEl.setAttribute("style","display: none;"),U()}))}changecompleted(){this.completed=!0}showDetails(){this.DOM.addEventListener("click",(()=>{switch(this.groupTodoRestEl.style.display){case"flex":console.log("hide"),this.groupTodoRestEl.style.display="none";break;case"none":console.log("show"),this.groupTodoRestEl.style.display="flex"}}))}}class o{constructor(t){this.name=t,this.listSection=document.createElement("div"),this.sectiontitleEl=document.createElement("h1"),this.listName=document.createElement("div"),this.listOption=document.createElement("option"),this.editBtnEl=document.createElement("div"),this.groupEl=document.createElement("div"),this.delListBtn=document.createElement("button")}editListBtn(){this.editBtnEl.addEventListener("click",(()=>{this.delListBtn.setAttribute("style","display: inline")}))}delListBtn2(){this.delListBtn.addEventListener("click",(()=>{var t;this.listSection.remove(),t=r.indexOf(this),r.splice(t,1),N()}))}}const s=document.getElementById("addBtn"),l=document.getElementById("addNewListSection"),d=document.getElementById("btnNewListSection"),u=document.getElementById("cancelBtn"),c=document.getElementById("cancelbtnNewListSection"),A=document.getElementById("completedlist"),m=document.getElementById("datetime-local"),f=document.getElementById("formTodo"),h=document.getElementById("formList"),g=document.getElementById("formTitle"),p=document.getElementById("formTask"),E=document.getElementById("todolist"),v=document.getElementById("formPriority"),b=document.getElementById("formNotes"),C=document.querySelector(".myLists"),y=document.getElementById("todoSelect"),B=document.getElementById("addSectionList"),w=document.querySelector(".formListContainer"),x=document.getElementById("addTodoButton"),T=document.querySelector(".formTodoContainer");function k(e,n,r,i,o,s,l,d){!function(e,n,r,i,o,s,l,d){const u=new a(e,n,r,i,o,s,l,d);u.listener(),u.delBtn(),t.push(u),u.editBtn(),u.addBtn(),u.cancelBtnTodo(),u.showDetails()}(e,n,r,i,o,s,l,d),f.reset(),D()}function S(t,e){!function(t,e){const n=new o(t);e.push(n),n.editListBtn(),n.delListBtn2()}(e,t),h.reset(),N()}function D(){var e;document.querySelectorAll("#todolist > *").forEach((t=>{t.remove()})),t.forEach((e=>{switch(e.completed){case!1:!function(t){"todolist"==t.myTodoList?function(t){E.appendChild(t.DOM),M(t)}(t):r.forEach((e=>{e.name===t.myTodoList&&function(t,e){t.listName.appendChild(e.DOM),M(e)}(e,t)}))}(e);break;case!0:!function(e){switch(e.deleted){case!0:!function(e,r){r.DOM.remove(),n.push(r),t.splice(e,1)}(t.indexOf(e),e);break;case!1:!function(t){A.appendChild(t.DOM),M(t),t.editBtnEl.setAttribute("style","display: none;"),t.delBtnEl.style.display="inline"}(e)}}(e)}})),e=t,Y=[...e],localStorage.setItem("todos",JSON.stringify(Y))}function M(t){t.DOM.setAttribute("class","cards"),t.inputEl.setAttribute("type","checkbox"),t.inputEl.setAttribute("id","checkbox"),t.inputEl.setAttribute("name","checkbox"),t.inputEl.setAttribute("value","checked"),t.groupTodoITTEl.setAttribute("class","groupTodoTitle"),t.DOM.appendChild(t.groupTodoITTEl),t.groupTodoITTEl.appendChild(t.inputEl),t.titleEl.textContent=t.title,t.groupTodoITTEl.appendChild(t.titleEl),t.duedateEl.textContent=Z(function(t,n){var r;e(1,arguments);var a=i(null!==(r=null==n?void 0:n.additionalDigits)&&void 0!==r?r:2);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var o,s=function(t){var e,n={},r=t.split(G.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?e=r[0]:(n.date=r[0],e=r[1],G.timeZoneDelimiter.test(n.date)&&(n.date=t.split(G.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var i=G.timezone.exec(e);i?(n.time=e.replace(i[1],""),n.timezone=i[1]):n.time=e}return n}(t);if(s.date){var l=function(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};var i=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?i:100*a,restDateString:t.slice((r[1]||r[2]).length)}}(s.date,a);o=function(t,e){if(null===e)return new Date(NaN);var n=t.match(J);if(!n)return new Date(NaN);var r=!!n[4],i=V(n[1]),a=V(n[2])-1,o=V(n[3]),s=V(n[4]),l=V(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,l)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var i=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+i),r}(e,s,l):new Date(NaN);var d=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(tt[e]||(et(t)?29:28))}(e,a,o)&&function(t,e){return e>=1&&e<=(et(t)?366:365)}(e,i)?(d.setUTCFullYear(e,a,Math.max(i,o)),d):new Date(NaN)}(l.restDateString,l.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var d,u=o.getTime(),c=0;if(s.time&&(c=function(t){var e=t.match($);if(!e)return NaN;var n=K(e[1]),r=K(e[2]),i=K(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,i)?n*Q+6e4*r+1e3*i:NaN}(s.time),isNaN(c)))return new Date(NaN);if(!s.timezone){var A=new Date(u+c),m=new Date(0);return m.setFullYear(A.getUTCFullYear(),A.getUTCMonth(),A.getUTCDate()),m.setHours(A.getUTCHours(),A.getUTCMinutes(),A.getUTCSeconds(),A.getUTCMilliseconds()),m}return d=function(t){if("Z"===t)return 0;var e=t.match(_);if(!e)return 0;var n="+"===e[1]?-1:1,r=parseInt(e[2]),i=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,i)?n*(r*Q+6e4*i):NaN}(s.timezone),isNaN(d)?new Date(NaN):new Date(u+c+d)}(t.duedate),"EEEE, MMMM do, hh:mm a"),t.groupTodoITTEl.appendChild(t.duedateEl),t.editBtnEl.textContent=" ⋮ ",t.editBtnEl.setAttribute("class","editTodo"),t.groupTodoITTEl.appendChild(t.editBtnEl),t.groupTodoRestEl.style.display="none",t.groupTodoRestEl.setAttribute("class","groupTodoRestEl"),t.DOM.appendChild(t.groupTodoRestEl),t.taskEl.textContent=`Task: ${t.task}`,t.groupTodoRestEl.appendChild(t.taskEl),t.priorityEl.textContent=`Priority: ${t.priority}`,t.groupTodoRestEl.appendChild(t.priorityEl),t.notesEl.textContent=`Notes: ${t.notes}`,t.groupTodoRestEl.appendChild(t.notesEl),t.addBtnEl.textContent="Edit",t.addBtnEl.setAttribute("style","display: none;"),t.addBtnEl.setAttribute("class","styleBtn1"),s.insertAdjacentElement("afterend",t.addBtnEl),t.cancelBtnEl.textContent="Cancel",t.cancelBtnEl.setAttribute("style","display: none;"),t.cancelBtnEl.setAttribute("class","styleBtn2"),t.addBtnEl.insertAdjacentElement("afterend",t.cancelBtnEl),t.delBtnEl.textContent="X",t.groupTodoITTEl.appendChild(t.delBtnEl),t.delBtnEl.style.display="none",t.editBtnEl.style.display="inline"}function N(){r.forEach((t=>{C.prepend(t.listSection),t.listSection.setAttribute("class","list"),t.listSection.appendChild(t.groupEl),t.sectiontitleEl.textContent=t.name,t.groupEl.appendChild(t.sectiontitleEl),t.editBtnEl.textContent=" ⋮ ",t.editBtnEl.setAttribute("class","editTodo"),t.groupEl.appendChild(t.editBtnEl),t.delListBtn.textContent="Delete",t.delListBtn.setAttribute("style","display: none"),t.groupEl.appendChild(t.delListBtn),t.listName.setAttribute("id",t.name),t.listSection.appendChild(t.listName),t.listOption.setAttribute("value",t.name),t.listOption.textContent=t.name,y.appendChild(t.listOption)})),W=[...r],localStorage.setItem("todoList",JSON.stringify(W))}function U(){g.removeAttribute("value"),p.removeAttribute("value"),m.removeAttribute("value"),v.removeAttribute("value"),b.removeAttribute("value"),y.removeAttribute("value"),l.removeAttribute("value"),addBtn.setAttribute("style","display: inline;"),u.setAttribute("style","display: inline;"),f.reset(),h.reset()}s.addEventListener("click",(()=>{k(g.value,p.value,m.value,v.value,b.value,y.value,!1,!1),T.setAttribute("style","display: none")})),d.addEventListener("click",(()=>{S(r,l.value),w.setAttribute("style","display:none")})),c.addEventListener("click",(()=>{U(),w.setAttribute("style","display:none")})),u.addEventListener("click",(()=>{U(),T.setAttribute("style","display: none")})),B.addEventListener("click",(()=>{w.setAttribute("style","display:flex")})),x.addEventListener("click",(()=>{T.setAttribute("style","display: flex")}));let Y,W=[],L=[],j=[];localStorage.todoList&&(L=JSON.parse(localStorage.getItem("todoList")),L.forEach((t=>{S(r,t.name)}))),localStorage.todos&&(j=JSON.parse(localStorage.getItem("todos")),j.forEach((t=>{k(t.title,t.task,t.duedate,t.priority,t.notes,t.myTodoList,t.completed,t.deleted)})))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,